// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.main = (function() {
    function main() {
      this.show = bind(this.show, this);
    }

    main.prototype.show = function() {

      /* Share */
      var configSelect, correctSelectOptions, data, fillOptions, getCurInput, getCurSel, selectedOptionToInput, setCurrentOption, startConfigSelect, startSelection, unit, valuesGenerator;
      unit = {
        enterCode: 13,
        tabCode: 9,
        arrowDown: 40,
        arrowUp: 38,
        esc: 27
      };

      /* Default data for filtration (using into valuesGenerator) */
      data = this.tree.default_options;
      getCurInput = function() {
        return $('.select-sets_input');
      };

      /* Getting current select elect with options (using pattern Decorator) */
      getCurSel = function() {
        var $input, $sel;
        $input = getCurInput();

        /* Create select with options for input (if there are no) */
        if (($sel = $input.data('select')) == null) {
          $sel = $('<select></select>');
          startConfigSelect($sel);
          $input.after($sel);
          $input.data('select', $sel);
        }
        return $sel;
      };

      /* Configuring select after creating */
      startConfigSelect = function($sel) {
        $sel.attr({
          'multiple': true,
          'class': 'select-sets__options'
        });
        return $sel.css({
          display: 'none',
          position: 'absolute',
          width: getCurInput().css('width')
        });
      };

      /* Correct select after show */
      configSelect = function($sel) {};
      valuesGenerator = function(sBegin) {
        var dataAr, key, val;
        dataAr = [];
        for (key in data) {
          val = data[key];
          dataAr.push(val);
        }
        return dataAr.filter(function(str) {
          return str.text.startsWith(sBegin);
        });
      };

      /* Event handling */
      getCurInput().keyup(function(event) {
        var $sel;
        $sel = getCurSel();
        if ($sel.data('was-enter')) {
          $sel.data('was-enter', false);
          return;
        }
        switch (event.keyCode) {
          case unit.arrowDown:
            if ($sel.is(':visible')) {
              $sel.focus();
              return startSelection($sel[0]);
            }
            break;
          case unit.esc:
            return $sel.hide();
          default:
            correctSelectOptions(event, $sel, valuesGenerator);
        }
      });
      getCurSel().keydown(function(event) {
        var newSelectedIndex, sel, selLen;
        sel = $(this)[0];
        selLen = sel.options.length;
        switch (event.keyCode) {
          case unit.arrowDown:
            newSelectedIndex = (sel.selectedIndex + 1) % selLen;
            setCurrentOption($(sel), newSelectedIndex);
            break;
          case unit.arrowUp:
            newSelectedIndex = ((sel.selectedIndex - 1) + selLen) % selLen;
            setCurrentOption($(sel), newSelectedIndex);
            break;
          case unit.enterCode:
            $(this).data('was-enter', true);
            selectedOptionToInput();
            break;
          case unit.esc:
            $(this).hide();
        }
      });
      getCurSel().click(function(event) {
        return selectedOptionToInput();
      });
      setCurrentOption = function($sel, idx) {
        console.log('idx = ' + idx + ' old-selectedIndex = ' + $sel[0].selectedIndex);
        $sel.find('option').removeAttr('selected');
        return $sel.find('option').eq(idx).attr('selected', 'selected');
      };
      startSelection = function(sel) {
        if (sel.options.length === 1) {
          return sel.selectedIndex = 0;
        } else {
          return sel.selectedIndex = 1;
        }
      };
      correctSelectOptions = function(event, $sel, fnValuesGenerator) {
        var strBegin;
        configSelect(getCurSel());
        strBegin = event.target.value;
        fillOptions($sel, fnValuesGenerator(strBegin));
        if ($sel[0].options.length > 0) {
          $sel[0].selectedIndex = 0;
          $sel.show();
        }
      };
      fillOptions = function(sel, options) {
        var html;
        html = '';
        options.forEach(function(optVal) {
          html += "<option value='" + optVal.value + "'>" + optVal.text + "</option>";
        });
        $(sel).html(html);
      };
      return selectedOptionToInput = function() {
        var $input, $option, $sel;
        $sel = getCurSel();
        $option = $sel.find(':selected');
        $input = getCurInput();
        $input.val($option.text());
        $sel.hide();
        $input.focus();
      };
    };

    return main;

  })();

}).call(this);
