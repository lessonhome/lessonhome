class @main
  show : =>
    data = @tree.default_options
    valuesGenerator = (sBegin) ->
      #Заглушка (функция определяется пользователем компонента)
      ###
      data = [
        'asdf'
        'bsdf'
        'axx'
        'ala'
        'aka'
        'akadia'
      ]

###
      dataAr = []
      for key, val of data
        dataAr.push val
      dataAr.filter (str) ->
        str.text.startsWith sBegin

    unit =
      enterCode: 13
      tabCode: 9
      arrowDown: 40
      arrowUp: 38
      esc: 27

    configSelect = ->
      ### show options underneath input ###
      # Setting width of select same width of input
      $sel = $('.select-sets__options')
      $sel.css
        position: 'absolute'
        width: $('.select-sets_input').css('width')
      ###
      hInput = $('.select-sets_input').height();
      $sel.offset
        top: 195 + hInput
        left: 430
###

    correctSelectOptions = (event, $sel, fnValuesGenerator) ->
      configSelect()
      strBegin = event.target.value
      fillOptions $sel, fnValuesGenerator(strBegin)
      if $sel[0].options.length > 0
        $sel[0].selectedIndex = 0
        $sel[0].style.display = 'block'
      #!!!TODO Сохранять где-то начальное значения св-в display.
      return

    fillOptions = (sel, options) ->
      html = ''
      options.forEach (optVal) ->
        html += "<option value='#{optVal.value}'>#{optVal.text}</option>"
        return
      $(sel).html html
      return

    selectedOptionToInput = (sel) ->
      input = sel.previousElementSibling
      input.value = $(sel.options[sel.selectedIndex]).text()
      $(sel).hide()
      input.focus()
      return

    $('.select-sets_input').keyup (event) ->
      $sel = $(this).next('select')
      if $sel.data 'was-enter'
        $sel.data 'was-enter', false
        return
      switch event.keyCode
        when unit.arrowDown
          if $sel.is(':visible')
            $sel.focus();
            sel = $sel[0]
            if sel.options.length == 1
              sel.selectedIndex = 0;
            else
              sel.selectedIndex = 1;
        when unit.esc
          $sel.hide()
        else
          $sel.data 'default-options', $sel.children().detach()
          correctSelectOptions event, $sel, valuesGenerator
          return

    $('.select-sets__options').keydown (event) ->
      if event.keyCode == unit.arrowDown
        sel = event.target
        sel.selectedIndex = (sel.selectedIndex + 1) % sel.options.length
        return false
      if event.keyCode == unit.arrowUp
        sel = event.target
        selLen = sel.options.length;
        sel.selectedIndex = ((sel.selectedIndex - 1) + selLen) % selLen
        return false
      true

    $('.select-sets__options').keydown (event) ->
      sel = event.target.parentElement
      switch event.keyCode
        when unit.enterCode
          $(this).data 'was-enter', true
          selectedOptionToInput event.target
        when unit.esc then $(this).hide()

    $('.select-sets__options').click (event) ->
      selectedOptionToInput $(event.target).closest('select')[0]

  # ---
  # generated by js2coffee 2.0.1